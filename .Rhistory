}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aesaes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_point() +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_point() +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_point() +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_point() +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
ui<-fluidPage(
titlePanel(title = "Explore MTCARS Dataset"),
h4('Motor Trend Car Road Tests'),
fluidRow(
column(2,
selectInput('X', 'Choose X',column_names,column_names[1]),
selectInput('Y', 'Choose Y',column_names,column_names[3]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plot_01')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plot_01 <- renderPlot({
ggplot(data = mpg, mapping = aes_string(x=input$X, y=input$Y, colour=input$Splitby)) +
geom_smooth()
})
output$table_01<-DT::renderDataTable(dataset[,c(input$X,input$Y,input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
library(Lahman)
library(Lahman)
library(Lahman)
library(tidyverse)
# Convert to a tibble so it prints nicely
batting <- as_tibble(Lahman::Batting)
library(Lahman)
library(tidyverse)
# Convert to a tibble so it prints nicely
batting <- as_tibble(Lahman::Batting)
batters <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
batters %>%
arrange(desc(ba))
View(batters)
View(batting)
people <- as_tibble(Lahman::People)
df_people <- people %>%
dplyr::filter(nameLast == 'Trout')
View(df_people)
df <- batters %>%
left_join(people, c('playerID'))
View(df)
View(df)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = TRUE)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
View(batters)
View(df)
View(batters)
df <- df %>%
filter(finalGame > '1960.01.01')
View(df)
View(df)
df <- df %>%
filter(finalGame > '1960.01.01',
finalGame - debut > 365)
df <- batters %>%
left_join(people, c('playerID'))
modern_era <- df %>%
filter(finalGame > '1960.01.01')
View(modern_era)
modern_era <- df %>%
filter(finalGame > '1960.01.01',
ab > 100)
modern_era <- df %>%
filter(debut > '1960.01.01',
ab > 100,
)
View(modern_era)
modern_era <- df %>%
filter(debut > '1960.01.01',
ab > 600,
)
View(modern_era)
View(modern_era)
modern_era %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
modern_era %>%
ggplot(mapping = aes(x = ab, y = ba), alpha = 1/3) +
geom_point() +
geom_smooth(se = FALSE)
modern_era %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth()
modern_era %>%
ggplot(mapping = aes(x = ab, y = ba, color = birthCountry)) +
geom_point() +
geom_smooth()
modern_era %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth()
modern_era %>%
ggplot(mapping = aes(x = ab, y = ba, color = birthCountry)) +
geom_point()
modern_era %>%
ggplot(mapping = aes(x = birthCountry, y = count(birthCountry))) +
geom_bar()
modern_era %>%
ggplot(mapping = aes(x = birthCountry, y = count(birthCountry))) +
geom_bar()
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
flights <- nycflights13::flights
View(flights)
flights %>% group_by(carrier, dest) %>% summarise(n())
View(flights)
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
flights <- nycflights13::flights
# 1.
not_cancelled <- flights %>%
filter(!is.na(air_time))
View(not_cancelled)
# 4.
flights %>%
group_by(year, month, day) %>%
summarise(
n_cancelled = sum(is.na(air_time) | air_time == 0),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) %>%
select(year, month, day, n_cancelled, avg_arr_delay, avg_dep_delay) %>%
filter(avg_arr_delay > 0) %>%
ggplot()+
geom_point(aes(x = avg_arr_delay, y = n_cancelled, color = "red"))+
geom_smooth(aes(x = avg_arr_delay, y = n_cancelled, color = "red"), se =FALSE,method = "gam") +
geom_point(aes(x = avg_dep_delay, y = n_cancelled,color =  "blue"))  +
geom_smooth(aes(x = avg_dep_delay, y = n_cancelled,color =  "blue"), se =FALSE, method = "gam")
# 5.
not_cancelled %>%
group_by(carrier) %>%
summarise(
count = n(),
median_arr_delay = median(arr_delay),
avg_arr_delay = mean(arr_delay)
) %>%
filter(count > 1000)
# 5.
not_cancelled %>%
ggplot()+
geom_boxplot(mapping = aes(x = carrier, y = arr_delay))
View(not_cancelled)
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
library(nycflights13)
library(tidyverse)
library(ggplot2)
library(dplyr)
rm(list=ls())
flights <- nycflights13::flights
flights %>%
group_by(year, month, day) %>%
summarize(
n_cancelled = sum(is.na(air_time) | air_time == 0),
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) %>%
select(year, month, day, n_cancelled, avg_arr_delay, avg_dep_delay) %>%
filter(avg_arr_delay > 0) %>%
ggplot()+
geom_point(aes(x = avg_arr_delay, y = n_cancelled, color = "red"))+
geom_smooth(aes(x = avg_arr_delay, y = n_cancelled, color = "red"), se =FALSE,method = "gam") +
geom_point(aes(x = avg_dep_delay, y = n_cancelled,color =  "blue"))  +
geom_smooth(aes(x = avg_dep_delay, y = n_cancelled,color =  "blue"), se =FALSE, method = "gam")
# 5.
#first look at the carriers and arrival delay to get an idea
not_cancelled %>%
ggplot()+
geom_boxplot(mapping = aes(x = carrier, y = arr_delay))
#look at median and avg delay for each carrier
not_cancelled %>%
group_by(carrier) %>%
summarize(
count = n(),
median_arr_delay = median(arr_delay),
avg_arr_delay = mean(arr_delay)
) %>%
filter(count > 1000)
# 6.
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
slight_delay = sum(cumsum(arr_delay > 60), <1)
# 3. air_time column shows if the flight was cancelled or not
not_cancelled <- flights %>%
filter(!is.na(air_time))
# 5.
#first look at the carriers and arrival delay to get an idea
not_cancelled %>%
ggplot()+
geom_boxplot(mapping = aes(x = carrier, y = arr_delay))
#look at median and avg delay for each carrier
not_cancelled %>%
group_by(carrier) %>%
summarize(
count = n(),
median_arr_delay = median(arr_delay),
avg_arr_delay = mean(arr_delay)
) %>%
filter(count > 1000)
# 6.
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
slight_delay = sum(cumsum(arr_delay > 60), < 1)
not_cancelled %>%
group_by(origin, tailnum) %>%
summarise(
count = n(),
agg_dep_delay = sum(cumsum(dep_delay > 60) < 1)
)
not_cancelled %>%
group_by(tailnum) %>%
summarise(
count = n(),
agg_dep_delay = sum(cumsum(dep_delay > 60) < 1)
)
not_cancelled %>%
group_by(tailnum) %>%
summarise(
count = n(),
agg_dep_delay = sum(cumsum(arr_delay > 60) < 1)
)
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
agg_arr_delay = sum(cumsum(arr_delay > 60) < 1)
)
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
hour_arr_delay = sum(cumsum(arr_delay > 60) < 1)
)
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
hour_arr_delay = sum(cumsum(arr_delay > 60) < 1))
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
hour_arr_delay = sum(cumsum(arr_delay > 60) < 1),
count(sort = TRUE))
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
hour_arr_delay = sum(cumsum(arr_delay > 60) < 1))
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
hour_delay = sum(cumsum(arr_delay > 60) < 1))
not_cancelled %>%
group_by(tailnum) %>%
summarize(
count = n(),
no_hour_delay = sum(cumsum(arr_delay > 60) < 1))
library(tidyverse)
setwd("C:/Users/Eirik/OneDrive/College/Senior/Data 332/march_madness")
